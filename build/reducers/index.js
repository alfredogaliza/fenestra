"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var types = _interopRequireWildcard(require("../actions/types"));

var _Window = require("../components/Window");

var _actions = require("../actions");

var _actions2 = require("fenestra/dist/actions");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
  winKey: 0,
  isLoading: false,
  icons: [],
  windows: [],
  startX: 0,
  startY: 0,
  startTop: 0,
  startLeft: 0,
  startWidth: 0,
  startHeight: 0,
  transformKey: null,
  transformType: null
};

var EmptyTemplate = function EmptyTemplate() {
  return _react.default.createElement("span", null);
};

function newWindow(key) {
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    style: {}
  };
  var template = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EmptyTemplate;
  var templateProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var Template = (0, _reactRedux.connect)(undefined, (0, _actions2.boundTemplateActions)(key))(template);
  var top = key % 10 * 50 + 10;
  var left = key % 10 * 50 + 10;
  return {
    key: key,
    props: _objectSpread({}, _actions.DEFAULT_PROPS, {}, props, {
      style: _objectSpread({}, _actions.DEFAULT_PROPS.style, {}, props.style || {}, {
        top: top,
        left: left
      })
    }),
    component: (0, _Window.bindWindow)(key),
    content: _react.default.createElement(Template, templateProps)
  };
}

var fenestraReducer = function fenestraReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  var newState = _objectSpread({}, state);

  var target = null;
  if (action.type === types.WINDOW_TRANSFORM && state.transformKey === null) return state;

  switch (action.type) {
    case types.WINDOW_OPEN:
      var key = newState.winKey++;
      var window = newWindow(key, action.props, action.template, action.templateProps);
      newState.windows.push(window);
      newState.windows = newState.windows.map(function (window) {
        var props = _objectSpread({}, window.props, {
          style: _objectSpread({}, window.props.style)
        });

        props.active = action.props.active ? window.key === key : props.active;
        props.style.zIndex = window.key === key ? 2 : 1;
        return _objectSpread({}, window, {
          props: props
        });
      });
      break;

    case types.WINDOW_CLOSE:
      newState.windows = newState.windows.filter(function (window) {
        return window.key !== action.key;
      });
      break;

    case types.WINDOW_ACTIVATE:
      newState.windows = newState.windows.map(function (window) {
        var props = _objectSpread({}, window.props, {
          style: _objectSpread({}, window.props.style)
        });

        props.active = window.key === action.key;
        props.style.zIndex = window.key === action.key ? 2 : 1;
        return _objectSpread({}, window, {
          props: props
        });
      });
      break;

    case types.WINDOW_MINIMIZE:
      newState.windows = newState.windows.map(function (window) {
        if (window.key === action.key && window.props.minimizeable) {
          window.props.active = !action.minimize;
          window.props.minimized = action.minimize;
        }

        if (!action.minimize) {
          window.props.active = window.key === action.key && !action.minimize;
        }

        return window;
      });
      break;

    case types.WINDOW_MAXIMIZE:
      newState.windows = newState.windows.map(function (window) {
        var props = _objectSpread({}, window.props, {
          style: _objectSpread({}, window.props.style)
        });

        props.active = window.key === action.key;
        props.minimized = window.key === action.key ? false : window.props.minimized;
        props.maximized = window.key === action.key && window.props.resizeable ? action.maximize : window.props.maximized;
        props.style.zIndex = window.key === action.key ? 2 : 1;
        return _objectSpread({}, window, {
          props: props
        });
      });
      break;

    case types.WINDOW_START_TRANSFORM:
      target = newState.windows.find(function (window) {
        return window.key === action.key;
      });
      if (target.props.maximized) break;
      newState.transformKey = action.key;
      newState.transformType = action.transformType;
      newState.startX = action.x;
      newState.startY = action.y;
      newState.startTop = target.props.style.top;
      newState.startLeft = target.props.style.left;
      newState.startWidth = target.props.style.width;
      newState.startHeight = target.props.style.height;
      break;

    case types.WINDOW_TRANSFORM:
      if (!global.window) break;
      newState.windows = newState.windows.map(function (window) {
        var props = _objectSpread({}, window.props, {
          style: _objectSpread({}, window.props.style)
        });

        if (window.key === newState.transformKey) {
          var dx = action.x - newState.startX;
          var dy = action.y - newState.startY;

          if (newState.transformType === _actions.TRANSFORM_MOVE) {
            props.style.top = Math.max(0, newState.startTop + dy);
            props.style.left = Math.max(0, newState.startLeft + dx);
          } else if (newState.transformType === _actions.TRANSFORM_RESIZE) {
            props.style.width = Math.max(_actions.DEFAULT_WIDTH, newState.startWidth + dx);
            props.style.height = Math.max(_actions.DEFAULT_HEIGHT, newState.startHeight + dy);
          }
        }

        return _objectSpread({}, window, {
          props: _objectSpread({}, props, {
            style: _objectSpread({}, props.style)
          })
        });
      });
      break;

    case types.WINDOW_MINIMIZE_ALL:
      newState.windows = newState.windows.map(function (window) {
        window.props.minimized = true;
        window.props.active = false;
        return window;
      });
      break;

    case types.WINDOW_END_TRANSFORM:
      newState.transformKey = null;
      newState.transformType = null;
      break;

    case types.SET_FOOTER:
      newState.windows = newState.windows.map(function (window) {
        if (window.key === action.key) {
          window.props.footer = action.footer;
        }

        return window;
      });
      break;

    case types.SET_LOADING:
      var loadingWindow = newState.windows.find(function (window) {
        return window.key === action.key;
      });

      if (loadingWindow) {
        loadingWindow.isLoading = action.isLoading;
      } else {
        newState.isLoading = action.isLoading;
      }

      break;

    case types.SET_DATA:
      var winKey = 0;
      var icons = action.data.icons || [];
      var windows = (action.data.windows || []).map(function (window) {
        return newWindow(winKey++, window.props, window.template, window.templateProps);
      });
      newState = _objectSpread({}, initialState, {
        winKey: winKey,
        icons: icons,
        windows: windows
      });
      break;

    default:
      break;
  }

  return newState;
};

var _default = fenestraReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJ3aW5LZXkiLCJpc0xvYWRpbmciLCJpY29ucyIsIndpbmRvd3MiLCJzdGFydFgiLCJzdGFydFkiLCJzdGFydFRvcCIsInN0YXJ0TGVmdCIsInN0YXJ0V2lkdGgiLCJzdGFydEhlaWdodCIsInRyYW5zZm9ybUtleSIsInRyYW5zZm9ybVR5cGUiLCJFbXB0eVRlbXBsYXRlIiwibmV3V2luZG93Iiwia2V5IiwicHJvcHMiLCJzdHlsZSIsInRlbXBsYXRlIiwidGVtcGxhdGVQcm9wcyIsIlRlbXBsYXRlIiwidW5kZWZpbmVkIiwidG9wIiwibGVmdCIsIkRFRkFVTFRfUFJPUFMiLCJjb21wb25lbnQiLCJjb250ZW50IiwiZmVuZXN0cmFSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJuZXdTdGF0ZSIsInRhcmdldCIsInR5cGUiLCJ0eXBlcyIsIldJTkRPV19UUkFOU0ZPUk0iLCJXSU5ET1dfT1BFTiIsIndpbmRvdyIsInB1c2giLCJtYXAiLCJhY3RpdmUiLCJ6SW5kZXgiLCJXSU5ET1dfQ0xPU0UiLCJmaWx0ZXIiLCJXSU5ET1dfQUNUSVZBVEUiLCJXSU5ET1dfTUlOSU1JWkUiLCJtaW5pbWl6ZWFibGUiLCJtaW5pbWl6ZSIsIm1pbmltaXplZCIsIldJTkRPV19NQVhJTUlaRSIsIm1heGltaXplZCIsInJlc2l6ZWFibGUiLCJtYXhpbWl6ZSIsIldJTkRPV19TVEFSVF9UUkFOU0ZPUk0iLCJmaW5kIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImdsb2JhbCIsImR4IiwiZHkiLCJUUkFOU0ZPUk1fTU9WRSIsIk1hdGgiLCJtYXgiLCJUUkFOU0ZPUk1fUkVTSVpFIiwiREVGQVVMVF9XSURUSCIsIkRFRkFVTFRfSEVJR0hUIiwiV0lORE9XX01JTklNSVpFX0FMTCIsIldJTkRPV19FTkRfVFJBTlNGT1JNIiwiU0VUX0ZPT1RFUiIsImZvb3RlciIsIlNFVF9MT0FESU5HIiwibG9hZGluZ1dpbmRvdyIsIlNFVF9EQVRBIiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQVFBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxZQUFZLEdBQUc7QUFDakJDLEVBQUFBLE1BQU0sRUFBRSxDQURTO0FBRWpCQyxFQUFBQSxTQUFTLEVBQUUsS0FGTTtBQUdqQkMsRUFBQUEsS0FBSyxFQUFFLEVBSFU7QUFJakJDLEVBQUFBLE9BQU8sRUFBRSxFQUpRO0FBS2pCQyxFQUFBQSxNQUFNLEVBQUUsQ0FMUztBQU1qQkMsRUFBQUEsTUFBTSxFQUFFLENBTlM7QUFPakJDLEVBQUFBLFFBQVEsRUFBRSxDQVBPO0FBUWpCQyxFQUFBQSxTQUFTLEVBQUUsQ0FSTTtBQVNqQkMsRUFBQUEsVUFBVSxFQUFFLENBVEs7QUFVakJDLEVBQUFBLFdBQVcsRUFBRSxDQVZJO0FBV2pCQyxFQUFBQSxZQUFZLEVBQUUsSUFYRztBQVlqQkMsRUFBQUEsYUFBYSxFQUFFO0FBWkUsQ0FBckI7O0FBZUEsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQjtBQUFBLFNBQU0sMENBQU47QUFBQSxDQUF0Qjs7QUFFQSxTQUFTQyxTQUFULENBQW1CQyxHQUFuQixFQUEyRjtBQUFBLE1BQW5FQyxLQUFtRSx1RUFBM0Q7QUFBQ0MsSUFBQUEsS0FBSyxFQUFFO0FBQVIsR0FBMkQ7QUFBQSxNQUE5Q0MsUUFBOEMsdUVBQW5DTCxhQUFtQztBQUFBLE1BQXBCTSxhQUFvQix1RUFBSixFQUFJO0FBRXZGLE1BQU1DLFFBQVEsR0FBRyx5QkFBUUMsU0FBUixFQUFtQixvQ0FBcUJOLEdBQXJCLENBQW5CLEVBQThDRyxRQUE5QyxDQUFqQjtBQUVBLE1BQU1JLEdBQUcsR0FBSVAsR0FBRyxHQUFHLEVBQVAsR0FBYSxFQUFiLEdBQWtCLEVBQTlCO0FBQ0EsTUFBTVEsSUFBSSxHQUFJUixHQUFHLEdBQUcsRUFBUCxHQUFhLEVBQWIsR0FBa0IsRUFBL0I7QUFFQSxTQUFPO0FBQ0hBLElBQUFBLEdBQUcsRUFBSEEsR0FERztBQUVIQyxJQUFBQSxLQUFLLG9CQUNFUSxzQkFERixNQUVFUixLQUZGO0FBR0RDLE1BQUFBLEtBQUssb0JBQ0VPLHVCQUFjUCxLQURoQixNQUVHRCxLQUFLLENBQUNDLEtBQU4sSUFBZSxFQUZsQjtBQUdESyxRQUFBQSxHQUFHLEVBQUhBLEdBSEM7QUFHSUMsUUFBQUEsSUFBSSxFQUFKQTtBQUhKO0FBSEosTUFGRjtBQVdIRSxJQUFBQSxTQUFTLEVBQUUsd0JBQVdWLEdBQVgsQ0FYUjtBQVlIVyxJQUFBQSxPQUFPLEVBQUUsNkJBQUMsUUFBRCxFQUFjUCxhQUFkO0FBWk4sR0FBUDtBQWVIOztBQUVELElBQU1RLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBa0M7QUFBQSxNQUFqQ0MsS0FBaUMsdUVBQXpCNUIsWUFBeUI7QUFBQSxNQUFYNkIsTUFBVzs7QUFFdEQsTUFBSUMsUUFBUSxxQkFBUUYsS0FBUixDQUFaOztBQUNBLE1BQUlHLE1BQU0sR0FBRyxJQUFiO0FBRUEsTUFBSUYsTUFBTSxDQUFDRyxJQUFQLEtBQWdCQyxLQUFLLENBQUNDLGdCQUF0QixJQUEwQ04sS0FBSyxDQUFDakIsWUFBTixLQUF1QixJQUFyRSxFQUEyRSxPQUFPaUIsS0FBUDs7QUFFM0UsVUFBUUMsTUFBTSxDQUFDRyxJQUFmO0FBQ0ksU0FBS0MsS0FBSyxDQUFDRSxXQUFYO0FBRUksVUFBTXBCLEdBQUcsR0FBR2UsUUFBUSxDQUFDN0IsTUFBVCxFQUFaO0FBQ0EsVUFBTW1DLE1BQU0sR0FBR3RCLFNBQVMsQ0FBQ0MsR0FBRCxFQUFNYyxNQUFNLENBQUNiLEtBQWIsRUFBb0JhLE1BQU0sQ0FBQ1gsUUFBM0IsRUFBcUNXLE1BQU0sQ0FBQ1YsYUFBNUMsQ0FBeEI7QUFFQVcsTUFBQUEsUUFBUSxDQUFDMUIsT0FBVCxDQUFpQmlDLElBQWpCLENBQXNCRCxNQUF0QjtBQUVBTixNQUFBQSxRQUFRLENBQUMxQixPQUFULEdBQW1CMEIsUUFBUSxDQUFDMUIsT0FBVCxDQUFpQmtDLEdBQWpCLENBQXFCLFVBQUFGLE1BQU0sRUFBSTtBQUM5QyxZQUFJcEIsS0FBSyxxQkFBUW9CLE1BQU0sQ0FBQ3BCLEtBQWY7QUFBc0JDLFVBQUFBLEtBQUssb0JBQU9tQixNQUFNLENBQUNwQixLQUFQLENBQWFDLEtBQXBCO0FBQTNCLFVBQVQ7O0FBQ0FELFFBQUFBLEtBQUssQ0FBQ3VCLE1BQU4sR0FBZVYsTUFBTSxDQUFDYixLQUFQLENBQWF1QixNQUFiLEdBQXVCSCxNQUFNLENBQUNyQixHQUFQLEtBQWVBLEdBQXRDLEdBQTZDQyxLQUFLLENBQUN1QixNQUFsRTtBQUNBdkIsUUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVl1QixNQUFaLEdBQXNCSixNQUFNLENBQUNyQixHQUFQLEtBQWVBLEdBQWhCLEdBQXVCLENBQXZCLEdBQTJCLENBQWhEO0FBQ0EsaUNBQVlxQixNQUFaO0FBQW9CcEIsVUFBQUEsS0FBSyxFQUFMQTtBQUFwQjtBQUNILE9BTGtCLENBQW5CO0FBT0E7O0FBQ0osU0FBS2lCLEtBQUssQ0FBQ1EsWUFBWDtBQUNJWCxNQUFBQSxRQUFRLENBQUMxQixPQUFULEdBQW1CMEIsUUFBUSxDQUFDMUIsT0FBVCxDQUFpQnNDLE1BQWpCLENBQXdCLFVBQUFOLE1BQU07QUFBQSxlQUFJQSxNQUFNLENBQUNyQixHQUFQLEtBQWVjLE1BQU0sQ0FBQ2QsR0FBMUI7QUFBQSxPQUE5QixDQUFuQjtBQUNBOztBQUVKLFNBQUtrQixLQUFLLENBQUNVLGVBQVg7QUFDSWIsTUFBQUEsUUFBUSxDQUFDMUIsT0FBVCxHQUFtQjBCLFFBQVEsQ0FBQzFCLE9BQVQsQ0FBaUJrQyxHQUFqQixDQUFxQixVQUFBRixNQUFNLEVBQUk7QUFDOUMsWUFBSXBCLEtBQUsscUJBQVFvQixNQUFNLENBQUNwQixLQUFmO0FBQXNCQyxVQUFBQSxLQUFLLG9CQUFPbUIsTUFBTSxDQUFDcEIsS0FBUCxDQUFhQyxLQUFwQjtBQUEzQixVQUFUOztBQUNBRCxRQUFBQSxLQUFLLENBQUN1QixNQUFOLEdBQWdCSCxNQUFNLENBQUNyQixHQUFQLEtBQWVjLE1BQU0sQ0FBQ2QsR0FBdEM7QUFDQUMsUUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVl1QixNQUFaLEdBQXNCSixNQUFNLENBQUNyQixHQUFQLEtBQWVjLE1BQU0sQ0FBQ2QsR0FBdkIsR0FBOEIsQ0FBOUIsR0FBa0MsQ0FBdkQ7QUFDQSxpQ0FBWXFCLE1BQVo7QUFBb0JwQixVQUFBQSxLQUFLLEVBQUxBO0FBQXBCO0FBQ0gsT0FMa0IsQ0FBbkI7QUFNQTs7QUFFSixTQUFLaUIsS0FBSyxDQUFDVyxlQUFYO0FBQ0lkLE1BQUFBLFFBQVEsQ0FBQzFCLE9BQVQsR0FBbUIwQixRQUFRLENBQUMxQixPQUFULENBQWlCa0MsR0FBakIsQ0FBcUIsVUFBQUYsTUFBTSxFQUFJO0FBQzlDLFlBQUlBLE1BQU0sQ0FBQ3JCLEdBQVAsS0FBZWMsTUFBTSxDQUFDZCxHQUF0QixJQUE2QnFCLE1BQU0sQ0FBQ3BCLEtBQVAsQ0FBYTZCLFlBQTlDLEVBQTREO0FBQ3hEVCxVQUFBQSxNQUFNLENBQUNwQixLQUFQLENBQWF1QixNQUFiLEdBQXNCLENBQUNWLE1BQU0sQ0FBQ2lCLFFBQTlCO0FBQ0FWLFVBQUFBLE1BQU0sQ0FBQ3BCLEtBQVAsQ0FBYStCLFNBQWIsR0FBeUJsQixNQUFNLENBQUNpQixRQUFoQztBQUNIOztBQUNELFlBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2lCLFFBQVosRUFBc0I7QUFDbEJWLFVBQUFBLE1BQU0sQ0FBQ3BCLEtBQVAsQ0FBYXVCLE1BQWIsR0FBdUJILE1BQU0sQ0FBQ3JCLEdBQVAsS0FBZWMsTUFBTSxDQUFDZCxHQUF0QixJQUE2QixDQUFDYyxNQUFNLENBQUNpQixRQUE1RDtBQUNIOztBQUNELGVBQU9WLE1BQVA7QUFDSCxPQVRrQixDQUFuQjtBQVVBOztBQUNKLFNBQUtILEtBQUssQ0FBQ2UsZUFBWDtBQUNJbEIsTUFBQUEsUUFBUSxDQUFDMUIsT0FBVCxHQUFtQjBCLFFBQVEsQ0FBQzFCLE9BQVQsQ0FBaUJrQyxHQUFqQixDQUFxQixVQUFBRixNQUFNLEVBQUk7QUFDOUMsWUFBSXBCLEtBQUsscUJBQVFvQixNQUFNLENBQUNwQixLQUFmO0FBQXNCQyxVQUFBQSxLQUFLLG9CQUFPbUIsTUFBTSxDQUFDcEIsS0FBUCxDQUFhQyxLQUFwQjtBQUEzQixVQUFUOztBQUNBRCxRQUFBQSxLQUFLLENBQUN1QixNQUFOLEdBQWdCSCxNQUFNLENBQUNyQixHQUFQLEtBQWVjLE1BQU0sQ0FBQ2QsR0FBdEM7QUFDQUMsUUFBQUEsS0FBSyxDQUFDK0IsU0FBTixHQUFtQlgsTUFBTSxDQUFDckIsR0FBUCxLQUFlYyxNQUFNLENBQUNkLEdBQXZCLEdBQThCLEtBQTlCLEdBQXNDcUIsTUFBTSxDQUFDcEIsS0FBUCxDQUFhK0IsU0FBckU7QUFDQS9CLFFBQUFBLEtBQUssQ0FBQ2lDLFNBQU4sR0FBbUJiLE1BQU0sQ0FBQ3JCLEdBQVAsS0FBZWMsTUFBTSxDQUFDZCxHQUF0QixJQUE2QnFCLE1BQU0sQ0FBQ3BCLEtBQVAsQ0FBYWtDLFVBQTNDLEdBQXlEckIsTUFBTSxDQUFDc0IsUUFBaEUsR0FBMkVmLE1BQU0sQ0FBQ3BCLEtBQVAsQ0FBYWlDLFNBQTFHO0FBQ0FqQyxRQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWXVCLE1BQVosR0FBc0JKLE1BQU0sQ0FBQ3JCLEdBQVAsS0FBZWMsTUFBTSxDQUFDZCxHQUF2QixHQUE4QixDQUE5QixHQUFrQyxDQUF2RDtBQUNBLGlDQUFZcUIsTUFBWjtBQUFvQnBCLFVBQUFBLEtBQUssRUFBTEE7QUFBcEI7QUFDSCxPQVBrQixDQUFuQjtBQVFBOztBQUNKLFNBQUtpQixLQUFLLENBQUNtQixzQkFBWDtBQUNJckIsTUFBQUEsTUFBTSxHQUFHRCxRQUFRLENBQUMxQixPQUFULENBQWlCaUQsSUFBakIsQ0FBc0IsVUFBQWpCLE1BQU07QUFBQSxlQUFJQSxNQUFNLENBQUNyQixHQUFQLEtBQWVjLE1BQU0sQ0FBQ2QsR0FBMUI7QUFBQSxPQUE1QixDQUFUO0FBQ0EsVUFBSWdCLE1BQU0sQ0FBQ2YsS0FBUCxDQUFhaUMsU0FBakIsRUFBNEI7QUFDNUJuQixNQUFBQSxRQUFRLENBQUNuQixZQUFULEdBQXdCa0IsTUFBTSxDQUFDZCxHQUEvQjtBQUNBZSxNQUFBQSxRQUFRLENBQUNsQixhQUFULEdBQXlCaUIsTUFBTSxDQUFDakIsYUFBaEM7QUFDQWtCLE1BQUFBLFFBQVEsQ0FBQ3pCLE1BQVQsR0FBa0J3QixNQUFNLENBQUN5QixDQUF6QjtBQUNBeEIsTUFBQUEsUUFBUSxDQUFDeEIsTUFBVCxHQUFrQnVCLE1BQU0sQ0FBQzBCLENBQXpCO0FBQ0F6QixNQUFBQSxRQUFRLENBQUN2QixRQUFULEdBQW9Cd0IsTUFBTSxDQUFDZixLQUFQLENBQWFDLEtBQWIsQ0FBbUJLLEdBQXZDO0FBQ0FRLE1BQUFBLFFBQVEsQ0FBQ3RCLFNBQVQsR0FBcUJ1QixNQUFNLENBQUNmLEtBQVAsQ0FBYUMsS0FBYixDQUFtQk0sSUFBeEM7QUFDQU8sTUFBQUEsUUFBUSxDQUFDckIsVUFBVCxHQUFzQnNCLE1BQU0sQ0FBQ2YsS0FBUCxDQUFhQyxLQUFiLENBQW1CdUMsS0FBekM7QUFDQTFCLE1BQUFBLFFBQVEsQ0FBQ3BCLFdBQVQsR0FBdUJxQixNQUFNLENBQUNmLEtBQVAsQ0FBYUMsS0FBYixDQUFtQndDLE1BQTFDO0FBQ0E7O0FBRUosU0FBS3hCLEtBQUssQ0FBQ0MsZ0JBQVg7QUFDSSxVQUFJLENBQUN3QixNQUFNLENBQUN0QixNQUFaLEVBQW9CO0FBQ3BCTixNQUFBQSxRQUFRLENBQUMxQixPQUFULEdBQW1CMEIsUUFBUSxDQUFDMUIsT0FBVCxDQUFpQmtDLEdBQWpCLENBQXFCLFVBQUFGLE1BQU0sRUFBSTtBQUM5QyxZQUFJcEIsS0FBSyxxQkFBUW9CLE1BQU0sQ0FBQ3BCLEtBQWY7QUFBc0JDLFVBQUFBLEtBQUssb0JBQU9tQixNQUFNLENBQUNwQixLQUFQLENBQWFDLEtBQXBCO0FBQTNCLFVBQVQ7O0FBQ0EsWUFBSW1CLE1BQU0sQ0FBQ3JCLEdBQVAsS0FBZWUsUUFBUSxDQUFDbkIsWUFBNUIsRUFBMEM7QUFDdEMsY0FBTWdELEVBQUUsR0FBRzlCLE1BQU0sQ0FBQ3lCLENBQVAsR0FBV3hCLFFBQVEsQ0FBQ3pCLE1BQS9CO0FBQ0EsY0FBTXVELEVBQUUsR0FBRy9CLE1BQU0sQ0FBQzBCLENBQVAsR0FBV3pCLFFBQVEsQ0FBQ3hCLE1BQS9COztBQUNBLGNBQUl3QixRQUFRLENBQUNsQixhQUFULEtBQTJCaUQsdUJBQS9CLEVBQStDO0FBQzNDN0MsWUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVlLLEdBQVosR0FBa0J3QyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVlqQyxRQUFRLENBQUN2QixRQUFULEdBQW9CcUQsRUFBaEMsQ0FBbEI7QUFDQTVDLFlBQUFBLEtBQUssQ0FBQ0MsS0FBTixDQUFZTSxJQUFaLEdBQW1CdUMsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZakMsUUFBUSxDQUFDdEIsU0FBVCxHQUFxQm1ELEVBQWpDLENBQW5CO0FBQ0gsV0FIRCxNQUdPLElBQUk3QixRQUFRLENBQUNsQixhQUFULEtBQTJCb0QseUJBQS9CLEVBQWlEO0FBQ3BEaEQsWUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVl1QyxLQUFaLEdBQW9CTSxJQUFJLENBQUNDLEdBQUwsQ0FBU0Usc0JBQVQsRUFBd0JuQyxRQUFRLENBQUNyQixVQUFULEdBQXNCa0QsRUFBOUMsQ0FBcEI7QUFDQTNDLFlBQUFBLEtBQUssQ0FBQ0MsS0FBTixDQUFZd0MsTUFBWixHQUFxQkssSUFBSSxDQUFDQyxHQUFMLENBQVNHLHVCQUFULEVBQXlCcEMsUUFBUSxDQUFDcEIsV0FBVCxHQUF1QmtELEVBQWhELENBQXJCO0FBQ0g7QUFDSjs7QUFDRCxpQ0FBWXhCLE1BQVo7QUFBb0JwQixVQUFBQSxLQUFLLG9CQUFPQSxLQUFQO0FBQWNDLFlBQUFBLEtBQUssb0JBQU9ELEtBQUssQ0FBQ0MsS0FBYjtBQUFuQjtBQUF6QjtBQUNILE9BZGtCLENBQW5CO0FBZUE7O0FBRUosU0FBS2dCLEtBQUssQ0FBQ2tDLG1CQUFYO0FBQ0lyQyxNQUFBQSxRQUFRLENBQUMxQixPQUFULEdBQW1CMEIsUUFBUSxDQUFDMUIsT0FBVCxDQUFpQmtDLEdBQWpCLENBQXFCLFVBQUFGLE1BQU0sRUFBSTtBQUM5Q0EsUUFBQUEsTUFBTSxDQUFDcEIsS0FBUCxDQUFhK0IsU0FBYixHQUF5QixJQUF6QjtBQUNBWCxRQUFBQSxNQUFNLENBQUNwQixLQUFQLENBQWF1QixNQUFiLEdBQXNCLEtBQXRCO0FBQ0EsZUFBT0gsTUFBUDtBQUNILE9BSmtCLENBQW5CO0FBS0E7O0FBRUosU0FBS0gsS0FBSyxDQUFDbUMsb0JBQVg7QUFDSXRDLE1BQUFBLFFBQVEsQ0FBQ25CLFlBQVQsR0FBd0IsSUFBeEI7QUFDQW1CLE1BQUFBLFFBQVEsQ0FBQ2xCLGFBQVQsR0FBeUIsSUFBekI7QUFDQTs7QUFFSixTQUFLcUIsS0FBSyxDQUFDb0MsVUFBWDtBQUNJdkMsTUFBQUEsUUFBUSxDQUFDMUIsT0FBVCxHQUFtQjBCLFFBQVEsQ0FBQzFCLE9BQVQsQ0FBaUJrQyxHQUFqQixDQUFxQixVQUFBRixNQUFNLEVBQUk7QUFDOUMsWUFBSUEsTUFBTSxDQUFDckIsR0FBUCxLQUFlYyxNQUFNLENBQUNkLEdBQTFCLEVBQStCO0FBQzNCcUIsVUFBQUEsTUFBTSxDQUFDcEIsS0FBUCxDQUFhc0QsTUFBYixHQUFzQnpDLE1BQU0sQ0FBQ3lDLE1BQTdCO0FBQ0g7O0FBQ0QsZUFBT2xDLE1BQVA7QUFDSCxPQUxrQixDQUFuQjtBQU1BOztBQUVKLFNBQUtILEtBQUssQ0FBQ3NDLFdBQVg7QUFDSSxVQUFJQyxhQUFhLEdBQUcxQyxRQUFRLENBQUMxQixPQUFULENBQWlCaUQsSUFBakIsQ0FBc0IsVUFBQWpCLE1BQU07QUFBQSxlQUFJQSxNQUFNLENBQUNyQixHQUFQLEtBQWVjLE1BQU0sQ0FBQ2QsR0FBMUI7QUFBQSxPQUE1QixDQUFwQjs7QUFFQSxVQUFJeUQsYUFBSixFQUFtQjtBQUNmQSxRQUFBQSxhQUFhLENBQUN0RSxTQUFkLEdBQTBCMkIsTUFBTSxDQUFDM0IsU0FBakM7QUFDSCxPQUZELE1BRU87QUFDSDRCLFFBQUFBLFFBQVEsQ0FBQzVCLFNBQVQsR0FBcUIyQixNQUFNLENBQUMzQixTQUE1QjtBQUNIOztBQUVEOztBQUVKLFNBQUsrQixLQUFLLENBQUN3QyxRQUFYO0FBQ0ksVUFBSXhFLE1BQU0sR0FBRyxDQUFiO0FBQ0EsVUFBTUUsS0FBSyxHQUFJMEIsTUFBTSxDQUFDNkMsSUFBUCxDQUFZdkUsS0FBWixJQUFxQixFQUFwQztBQUNBLFVBQU1DLE9BQU8sR0FBRyxDQUFDeUIsTUFBTSxDQUFDNkMsSUFBUCxDQUFZdEUsT0FBWixJQUF1QixFQUF4QixFQUE0QmtDLEdBQTVCLENBQWdDLFVBQUFGLE1BQU0sRUFBSTtBQUN0RCxlQUFPdEIsU0FBUyxDQUFDYixNQUFNLEVBQVAsRUFBV21DLE1BQU0sQ0FBQ3BCLEtBQWxCLEVBQXlCb0IsTUFBTSxDQUFDbEIsUUFBaEMsRUFBMENrQixNQUFNLENBQUNqQixhQUFqRCxDQUFoQjtBQUNILE9BRmUsQ0FBaEI7QUFJQVcsTUFBQUEsUUFBUSxxQkFDRDlCLFlBREM7QUFFSkMsUUFBQUEsTUFBTSxFQUFOQSxNQUZJO0FBR0pFLFFBQUFBLEtBQUssRUFBTEEsS0FISTtBQUlKQyxRQUFBQSxPQUFPLEVBQVBBO0FBSkksUUFBUjtBQU1BOztBQUVKO0FBQ0k7QUFwSVI7O0FBdUlBLFNBQU8wQixRQUFQO0FBRUgsQ0FoSkQ7O2VBa0plSCxlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uL2FjdGlvbnMvdHlwZXMnO1xuXG5pbXBvcnQgeyBiaW5kV2luZG93IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XaW5kb3cnO1xuXG5pbXBvcnQge1xuICAgIFRSQU5TRk9STV9NT1ZFLFxuICAgIFRSQU5TRk9STV9SRVNJWkUsXG4gICAgREVGQVVMVF9QUk9QUyxcbiAgICBERUZBVUxUX1dJRFRILFxuICAgIERFRkFVTFRfSEVJR0hUXG59IGZyb20gJy4uL2FjdGlvbnMnO1xuXG5pbXBvcnQgeyBib3VuZFRlbXBsYXRlQWN0aW9ucyB9IGZyb20gJ2ZlbmVzdHJhL2Rpc3QvYWN0aW9ucyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICB3aW5LZXk6IDAsXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICBpY29uczogW10sXG4gICAgd2luZG93czogW10sXG4gICAgc3RhcnRYOiAwLFxuICAgIHN0YXJ0WTogMCxcbiAgICBzdGFydFRvcDogMCxcbiAgICBzdGFydExlZnQ6IDAsXG4gICAgc3RhcnRXaWR0aDogMCxcbiAgICBzdGFydEhlaWdodDogMCxcbiAgICB0cmFuc2Zvcm1LZXk6IG51bGwsXG4gICAgdHJhbnNmb3JtVHlwZTogbnVsbFxufVxuXG5jb25zdCBFbXB0eVRlbXBsYXRlID0gKCkgPT4gPHNwYW4gLz47XG5cbmZ1bmN0aW9uIG5ld1dpbmRvdyhrZXksIHByb3BzID0ge3N0eWxlOiB7fX0sIHRlbXBsYXRlID0gRW1wdHlUZW1wbGF0ZSwgdGVtcGxhdGVQcm9wcyA9IHt9KSB7XG5cbiAgICBjb25zdCBUZW1wbGF0ZSA9IGNvbm5lY3QodW5kZWZpbmVkLCBib3VuZFRlbXBsYXRlQWN0aW9ucyhrZXkpKSh0ZW1wbGF0ZSk7XG5cbiAgICBjb25zdCB0b3AgPSAoa2V5ICUgMTApICogNTAgKyAxMDtcbiAgICBjb25zdCBsZWZ0ID0gKGtleSAlIDEwKSAqIDUwICsgMTA7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBrZXksXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAuLi5ERUZBVUxUX1BST1BTLFxuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIC4uLkRFRkFVTFRfUFJPUFMuc3R5bGUsXG4gICAgICAgICAgICAgICAgLi4uKHByb3BzLnN0eWxlIHx8IHt9KSxcbiAgICAgICAgICAgICAgICB0b3AsIGxlZnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50OiBiaW5kV2luZG93KGtleSksXG4gICAgICAgIGNvbnRlbnQ6IDxUZW1wbGF0ZSB7Li4udGVtcGxhdGVQcm9wc30gLz5cbiAgICB9O1xuICAgIFxufVxuXG5jb25zdCBmZW5lc3RyYVJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xuXG4gICAgdmFyIG5ld1N0YXRlID0geyAuLi5zdGF0ZSB9O1xuICAgIHZhciB0YXJnZXQgPSBudWxsO1xuXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSB0eXBlcy5XSU5ET1dfVFJBTlNGT1JNICYmIHN0YXRlLnRyYW5zZm9ybUtleSA9PT0gbnVsbCkgcmV0dXJuIHN0YXRlO1xuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzLldJTkRPV19PUEVOOlxuXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBuZXdTdGF0ZS53aW5LZXkrKztcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvdyA9IG5ld1dpbmRvdyhrZXksIGFjdGlvbi5wcm9wcywgYWN0aW9uLnRlbXBsYXRlLCBhY3Rpb24udGVtcGxhdGVQcm9wcyk7XG5cbiAgICAgICAgICAgIG5ld1N0YXRlLndpbmRvd3MucHVzaCh3aW5kb3cpO1xuXG4gICAgICAgICAgICBuZXdTdGF0ZS53aW5kb3dzID0gbmV3U3RhdGUud2luZG93cy5tYXAod2luZG93ID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSB7IC4uLndpbmRvdy5wcm9wcywgc3R5bGU6IHsgLi4ud2luZG93LnByb3BzLnN0eWxlIH0gfTtcbiAgICAgICAgICAgICAgICBwcm9wcy5hY3RpdmUgPSBhY3Rpb24ucHJvcHMuYWN0aXZlID8gKHdpbmRvdy5rZXkgPT09IGtleSkgOiBwcm9wcy5hY3RpdmU7XG4gICAgICAgICAgICAgICAgcHJvcHMuc3R5bGUuekluZGV4ID0gKHdpbmRvdy5rZXkgPT09IGtleSkgPyAyIDogMTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi53aW5kb3csIHByb3BzIH07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdHlwZXMuV0lORE9XX0NMT1NFOlxuICAgICAgICAgICAgbmV3U3RhdGUud2luZG93cyA9IG5ld1N0YXRlLndpbmRvd3MuZmlsdGVyKHdpbmRvdyA9PiB3aW5kb3cua2V5ICE9PSBhY3Rpb24ua2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuV0lORE9XX0FDVElWQVRFOlxuICAgICAgICAgICAgbmV3U3RhdGUud2luZG93cyA9IG5ld1N0YXRlLndpbmRvd3MubWFwKHdpbmRvdyA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0geyAuLi53aW5kb3cucHJvcHMsIHN0eWxlOiB7IC4uLndpbmRvdy5wcm9wcy5zdHlsZSB9IH07XG4gICAgICAgICAgICAgICAgcHJvcHMuYWN0aXZlID0gKHdpbmRvdy5rZXkgPT09IGFjdGlvbi5rZXkpO1xuICAgICAgICAgICAgICAgIHByb3BzLnN0eWxlLnpJbmRleCA9ICh3aW5kb3cua2V5ID09PSBhY3Rpb24ua2V5KSA/IDIgOiAxO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLndpbmRvdywgcHJvcHMgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5XSU5ET1dfTUlOSU1JWkU6XG4gICAgICAgICAgICBuZXdTdGF0ZS53aW5kb3dzID0gbmV3U3RhdGUud2luZG93cy5tYXAod2luZG93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LmtleSA9PT0gYWN0aW9uLmtleSAmJiB3aW5kb3cucHJvcHMubWluaW1pemVhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wcm9wcy5hY3RpdmUgPSAhYWN0aW9uLm1pbmltaXplO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucHJvcHMubWluaW1pemVkID0gYWN0aW9uLm1pbmltaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWFjdGlvbi5taW5pbWl6ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucHJvcHMuYWN0aXZlID0gKHdpbmRvdy5rZXkgPT09IGFjdGlvbi5rZXkgJiYgIWFjdGlvbi5taW5pbWl6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHR5cGVzLldJTkRPV19NQVhJTUlaRTpcbiAgICAgICAgICAgIG5ld1N0YXRlLndpbmRvd3MgPSBuZXdTdGF0ZS53aW5kb3dzLm1hcCh3aW5kb3cgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHsgLi4ud2luZG93LnByb3BzLCBzdHlsZTogeyAuLi53aW5kb3cucHJvcHMuc3R5bGUgfSB9O1xuICAgICAgICAgICAgICAgIHByb3BzLmFjdGl2ZSA9ICh3aW5kb3cua2V5ID09PSBhY3Rpb24ua2V5KTtcbiAgICAgICAgICAgICAgICBwcm9wcy5taW5pbWl6ZWQgPSAod2luZG93LmtleSA9PT0gYWN0aW9uLmtleSkgPyBmYWxzZSA6IHdpbmRvdy5wcm9wcy5taW5pbWl6ZWQ7XG4gICAgICAgICAgICAgICAgcHJvcHMubWF4aW1pemVkID0gKHdpbmRvdy5rZXkgPT09IGFjdGlvbi5rZXkgJiYgd2luZG93LnByb3BzLnJlc2l6ZWFibGUpID8gYWN0aW9uLm1heGltaXplIDogd2luZG93LnByb3BzLm1heGltaXplZDtcbiAgICAgICAgICAgICAgICBwcm9wcy5zdHlsZS56SW5kZXggPSAod2luZG93LmtleSA9PT0gYWN0aW9uLmtleSkgPyAyIDogMTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi53aW5kb3csIHByb3BzIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHR5cGVzLldJTkRPV19TVEFSVF9UUkFOU0ZPUk06ICAgICAgICAgICAgXG4gICAgICAgICAgICB0YXJnZXQgPSBuZXdTdGF0ZS53aW5kb3dzLmZpbmQod2luZG93ID0+IHdpbmRvdy5rZXkgPT09IGFjdGlvbi5rZXkpO1xuICAgICAgICAgICAgaWYgKHRhcmdldC5wcm9wcy5tYXhpbWl6ZWQpIGJyZWFrO1xuICAgICAgICAgICAgbmV3U3RhdGUudHJhbnNmb3JtS2V5ID0gYWN0aW9uLmtleTtcbiAgICAgICAgICAgIG5ld1N0YXRlLnRyYW5zZm9ybVR5cGUgPSBhY3Rpb24udHJhbnNmb3JtVHlwZTtcbiAgICAgICAgICAgIG5ld1N0YXRlLnN0YXJ0WCA9IGFjdGlvbi54O1xuICAgICAgICAgICAgbmV3U3RhdGUuc3RhcnRZID0gYWN0aW9uLnk7XG4gICAgICAgICAgICBuZXdTdGF0ZS5zdGFydFRvcCA9IHRhcmdldC5wcm9wcy5zdHlsZS50b3A7XG4gICAgICAgICAgICBuZXdTdGF0ZS5zdGFydExlZnQgPSB0YXJnZXQucHJvcHMuc3R5bGUubGVmdDtcbiAgICAgICAgICAgIG5ld1N0YXRlLnN0YXJ0V2lkdGggPSB0YXJnZXQucHJvcHMuc3R5bGUud2lkdGg7XG4gICAgICAgICAgICBuZXdTdGF0ZS5zdGFydEhlaWdodCA9IHRhcmdldC5wcm9wcy5zdHlsZS5oZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHR5cGVzLldJTkRPV19UUkFOU0ZPUk06ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWdsb2JhbC53aW5kb3cpIGJyZWFrO1xuICAgICAgICAgICAgbmV3U3RhdGUud2luZG93cyA9IG5ld1N0YXRlLndpbmRvd3MubWFwKHdpbmRvdyA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0geyAuLi53aW5kb3cucHJvcHMsIHN0eWxlOiB7IC4uLndpbmRvdy5wcm9wcy5zdHlsZSB9IH07XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5rZXkgPT09IG5ld1N0YXRlLnRyYW5zZm9ybUtleSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkeCA9IGFjdGlvbi54IC0gbmV3U3RhdGUuc3RhcnRYO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkeSA9IGFjdGlvbi55IC0gbmV3U3RhdGUuc3RhcnRZO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3U3RhdGUudHJhbnNmb3JtVHlwZSA9PT0gVFJBTlNGT1JNX01PVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnN0eWxlLnRvcCA9IE1hdGgubWF4KDAsIG5ld1N0YXRlLnN0YXJ0VG9wICsgZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc3R5bGUubGVmdCA9IE1hdGgubWF4KDAsIG5ld1N0YXRlLnN0YXJ0TGVmdCArIGR4KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdTdGF0ZS50cmFuc2Zvcm1UeXBlID09PSBUUkFOU0ZPUk1fUkVTSVpFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdHlsZS53aWR0aCA9IE1hdGgubWF4KERFRkFVTFRfV0lEVEgsIG5ld1N0YXRlLnN0YXJ0V2lkdGggKyBkeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heChERUZBVUxUX0hFSUdIVCwgbmV3U3RhdGUuc3RhcnRIZWlnaHQgKyBkeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ud2luZG93LCBwcm9wczogeyAuLi5wcm9wcywgc3R5bGU6IHsgLi4ucHJvcHMuc3R5bGUgfSB9IH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuV0lORE9XX01JTklNSVpFX0FMTDpcbiAgICAgICAgICAgIG5ld1N0YXRlLndpbmRvd3MgPSBuZXdTdGF0ZS53aW5kb3dzLm1hcCh3aW5kb3cgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5wcm9wcy5taW5pbWl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5wcm9wcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHR5cGVzLldJTkRPV19FTkRfVFJBTlNGT1JNOlxuICAgICAgICAgICAgbmV3U3RhdGUudHJhbnNmb3JtS2V5ID0gbnVsbDtcbiAgICAgICAgICAgIG5ld1N0YXRlLnRyYW5zZm9ybVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB0eXBlcy5TRVRfRk9PVEVSOlxuICAgICAgICAgICAgbmV3U3RhdGUud2luZG93cyA9IG5ld1N0YXRlLndpbmRvd3MubWFwKHdpbmRvdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5rZXkgPT09IGFjdGlvbi5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnByb3BzLmZvb3RlciA9IGFjdGlvbi5mb290ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgdHlwZXMuU0VUX0xPQURJTkc6XG4gICAgICAgICAgICB2YXIgbG9hZGluZ1dpbmRvdyA9IG5ld1N0YXRlLndpbmRvd3MuZmluZCh3aW5kb3cgPT4gd2luZG93LmtleSA9PT0gYWN0aW9uLmtleSk7XG5cbiAgICAgICAgICAgIGlmIChsb2FkaW5nV2luZG93KSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1dpbmRvdy5pc0xvYWRpbmcgPSBhY3Rpb24uaXNMb2FkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZS5pc0xvYWRpbmcgPSBhY3Rpb24uaXNMb2FkaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHR5cGVzLlNFVF9EQVRBOlxuICAgICAgICAgICAgdmFyIHdpbktleSA9IDA7XG4gICAgICAgICAgICBjb25zdCBpY29ucyA9IChhY3Rpb24uZGF0YS5pY29ucyB8fCBbXSk7XG4gICAgICAgICAgICBjb25zdCB3aW5kb3dzID0gKGFjdGlvbi5kYXRhLndpbmRvd3MgfHwgW10pLm1hcCh3aW5kb3cgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdXaW5kb3cod2luS2V5KyssIHdpbmRvdy5wcm9wcywgd2luZG93LnRlbXBsYXRlLCB3aW5kb3cudGVtcGxhdGVQcm9wcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmV3U3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxuICAgICAgICAgICAgICAgIHdpbktleSxcbiAgICAgICAgICAgICAgICBpY29ucyxcbiAgICAgICAgICAgICAgICB3aW5kb3dzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdTdGF0ZTtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBmZW5lc3RyYVJlZHVjZXI7Il19